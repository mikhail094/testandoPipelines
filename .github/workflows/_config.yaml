name: _config

env:
  dev-cluster:            cloudkube-dev-m59i-cluster
  dev-resource-group:     cloudkube-dev-m59i-rg
  dev-hostname:           architecture-review.dev.cloudkube.io
  dev-branch:             'refs/heads/main'

  staging-cluster:        cloudkube-staging-1bp-cluster
  staging-resource-group: cloudkube-staging-1bp-rg
  staging-hostname:       architecture-review.staging.cloudkube.io
  staging-branch:         'refs/heads/staging'

  cluster-namespace:      architecture-review
  url-format:             'https://{0}/'

on:
  workflow_call:
    outputs:
      github-env:
        description: 'GitHub Environment for deployment'
        value: ${{ jobs.setup-variables.outputs.github-env }}
      cluster:
        description: 'Name of AKS Cluster resource'
        value: ${{ jobs.setup-variables.outputs.cluster }}
      cluster-namespace:
        description: 'Name of Kubernetes Cluster namespace where our app is deployed'
        value: ${{ jobs.setup-variables.outputs.cluster-namespace }}
      resource-group:
        description: 'Name of resource group that AKS cluster belongs to, i.e. not the managed group.'
        value: ${{ jobs.setup-variables.outputs.resource-group }}
      url:
        description: 'The URL used for e2e testing'
        value: ${{ jobs.setup-variables.outputs.url }}
      hostname:
        description: 'Hostname for ingress configuration'
        value: ${{ jobs.setup-variables.outputs.hostname }}
      git-sha:
        description: 'Short version of current git sha'
        value: ${{ jobs.setup-variables.outputs.git-sha }}
      docker-tag:
        description: 'Docker Image Tag'
        value: ${{ jobs.setup-variables.outputs.docker-tag }}
      overlays:
        description: 'Kustomize Overlays directory'
        value: ${{ jobs.setup-variables.outputs.overlays }}


jobs:
  setup-variables:
    runs-on: ubuntu-latest
    outputs:
      github-env:        ${{ steps.resolved.outputs.github-env }}
      cluster:           ${{ steps.resolved.outputs.cluster }}
      cluster-namespace: ${{ steps.resolved.outputs.cluster-namespace }}
      resource-group:    ${{ steps.resolved.outputs.resource-group }}
      url:               ${{ steps.resolved.outputs.url }}
      hostname:          ${{ steps.resolved.outputs.hostname }}
      git-sha:           ${{ steps.resolved.outputs.git-sha }}
      docker-tag:        ${{ steps.resolved.outputs.docker-tag }}
      overlays:          ${{ steps.resolved.outputs.overlays }}

    steps:
    - uses: actions/checkout@v3

    - name: save git sha
      run: echo "git-sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    # Dev
    # ===
    - id: is-dev
      if: github.ref == 'refs/heads/main' # <== CONFIGURE (1)
      name: 'DEV: set vars'
      run: |
        echo "github-env=dev" >> $GITHUB_ENV
        echo "overlays=dev" >> $GITHUB_ENV
        echo "cluster=${{ env.dev-cluster }}" >> $GITHUB_ENV
        echo "rg=${{ env.dev-resource-group }}" >> $GITHUB_ENV
        echo "hostname=${{ env.dev-hostname }}" >> $GITHUB_ENV
        echo "url=${{ format(env.url-format, env.dev-hostname) }}" >> $GITHUB_ENV
        echo "docker-tag=dev-${{ env.git-sha }}" >> $GITHUB_ENV

    # Staging
    # =======
    - id: is-staging
      if: github.ref == 'refs/heads/staging' # <== CONFIGURE (1)
      name: 'STAGING: set vars'
      run: |
        echo "github-env=staging" >> $GITHUB_ENV
        echo "overlays=staging" >> $GITHUB_ENV
        echo "cluster=${{ env.staging-cluster }}" >> $GITHUB_ENV
        echo "rg=${{ env.staging-resource-group }}" >> $GITHUB_ENV
        echo "hostname=${{ env.staging-hostname }}" >> $GITHUB_ENV
        echo "url=${{ format(env.url-format, env.staging-hostname) }}" >> $GITHUB_ENV
        echo "docker-tag=staging-${{ env.git-sha }}" >> $GITHUB_ENV

    # Set Outputs
    # ===========
    - id: resolved
      name: 'OUTPUTS - resolved'
      run: |
        echo "github-env=${{ env.github-env }}" >> $GITHUB_OUTPUT
        echo "overlays=${{ env.overlays }}" >> $GITHUB_OUTPUT
        echo "cluster=${{ env.cluster }}" >> $GITHUB_OUTPUT
        echo "cluster-namespace=${{ env.cluster-namespace }}" >> $GITHUB_OUTPUT
        echo "resource-group=${{ env.rg }}" >> $GITHUB_OUTPUT
        echo "docker-tag=${{ env.docker-tag }}" >> $GITHUB_OUTPUT
        echo "url=${{ env.url }}" >> $GITHUB_OUTPUT
        echo "hostname=${{ env.hostname }}" >> $GITHUB_OUTPUT
        echo "git-sha=${{ env.git-sha }}" >> $GITHUB_OUTPUT

    # Echo Summary
    # =============
    - id: summary
      name: 'Echo to GH Step Summary'
      run: |
        echo "### _config.yaml" >> $GITHUB_STEP_SUMMARY
        echo "This file sets dev vs prod, etc. variables based on branch names." >> $GITHUB_STEP_SUMMARY

        echo "| Variable | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|:--|:--|" >> $GITHUB_STEP_SUMMARY
        echo "| github-env | ${{ env.github-env }} |" >> $GITHUB_STEP_SUMMARY
        echo "| overlays | ${{ env.overlays }} |" >> $GITHUB_STEP_SUMMARY
        echo "| cluster | ${{ env.cluster }} |" >> $GITHUB_STEP_SUMMARY
        echo "| cluster-namespace | ${{ env.cluster-namespace }} |" >> $GITHUB_STEP_SUMMARY
        echo "| resource-group | ${{ env.rg }} |" >> $GITHUB_STEP_SUMMARY
        echo "| docker-tag | ${{ env.docker-tag }} |" >> $GITHUB_STEP_SUMMARY
        echo "| url | ${{ env.url }} |" >> $GITHUB_STEP_SUMMARY
        echo "| hostname | ${{ env.hostname }} |" >> $GITHUB_STEP_SUMMARY
        echo "| git-sha | ${{ env.git-sha }} |" >> $GITHUB_STEP_SUMMARY


# =========
# Footnotes
# =========
# (1) `env` context not available in jobs  `jobs.<job_id>.if`
# https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
